name: CI

on:
  push:
    branches:
      - main
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.set-values.outputs.rust }}
      os: ${{ steps.set-values.outputs.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Set matrix values
        id: set-values
        run: |
          root_package_id="$(cargo metadata --format-version 1 | jq -cr '.resolve.root')"
          root_package="$(cargo metadata --format-version 1 | jq -c --arg pkgid "${root_package_id}" '.packages[] | select(.id == $pkgid)')"
          echo "${root_package}" | jq -c '{ root_package: .name }'

          msrv="$(echo "${root_package}" | jq '.rust_version')"
          rust="$(echo "[\"stable\", ${msrv}]" | jq -c)"
          echo "::set-output name=rust::${rust}"

          os="$(echo '["ubuntu-latest", "macos-latest", "windows-latest"]' | jq -c)"
          echo "::set-output name=os::${os}"

  set-workspace:
    runs-on: ubuntu-latest
    outputs:
      workspaces: ${{ steps.set-workspace.outputs.workspaces }}
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Set workspace paths
        id: set-workspace
        run: |
          value="$(cargo xtask exec -- pwd | sed "s@^$(pwd)@.@" | sed 's/$/ -> target/')"
          echo "${value}"
          value="${value//$'\n'/'%0A'}"
          echo "::set-output name=workspaces::${value}"

  test:
    name: Test
    needs: [set-matrix, set-workspace]
    strategy:
      fail-fast: false
      matrix:
        rust: ${{ fromJSON(needs.set-matrix.outputs.rust) }}
        os: ${{ fromJSON(needs.set-matrix.outputs.os) }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ needs.set-workspace.outputs.workspaces }}
      - name: cargo xtask test
        run: |
          # DO NOT USE `--all-targets` here, doctests are not built with `--all-targets`
          cargo xtask test
          cargo xtask exec --no-root -- cargo xtask dist
        shell: bash

  coverage:
    name: Code coverage
    needs: [set-matrix, set-workspace]
    strategy:
      fail-fast: false
      matrix:
        rust: [stable]
        os: ${{ fromJSON(needs.set-matrix.outputs.os) }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          components: llvm-tools-preview
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ needs.set-workspace.outputs.workspaces }}
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Generate code coverage
        run: |
          cargo xtask exec -- cargo llvm-cov --workspace --lcov --output-path lcov-test.info
          cargo xtask exec --no-root -- cargo llvm-cov run --lcov --output-path lcov-xtask-dist.info -p xtask -- dist
        shell: bash
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: |
            **/lcov-*.info
          fail_ci_if_error: true

  build:
    name: Build
    needs: [set-matrix, set-workspace]
    strategy:
      fail-fast: false
      matrix:
        rust: ${{ fromJSON(needs.set-matrix.outputs.rust) }}
        os: ${{ fromJSON(needs.set-matrix.outputs.os) }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ needs.set-workspace.outputs.workspaces }}
      - name: cargo xtask build
        run: cargo xtask build -- --all-targets
        shell: bash

  lint:
    name: Lint
    needs: [set-matrix, set-workspace]
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(needs.set-matrix.outputs.os) }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ needs.set-workspace.outputs.workspaces }}
      - uses: taiki-e/install-action@v1
        with:
          tool: cargo-udeps,cargo-rdme
      - run: rustup toolchain add nightly --profile minimal
        shell: bash
      - run: cargo xtask lint
        shell: bash

  rustdoc:
    name: Docs
    strategy:
      fail-fast: false
      matrix:
        job:
          - rust: stable
            flags: ""
          - rust: nightly
            flags: "--cfg docsrs"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.job.rust }}
      - uses: Swatinem/rust-cache@v2
      - name: cargo doc
        uses: actions-rs/cargo@v1
        env:
          RUSTDOCFLAGS: -D warnings ${{ matrix.job.flags }}
        with:
          command: doc
          args: --no-deps --document-private-items --workspace --all-features --examples

  publish-dry-run:
    name: Publish dry run
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --dry-run

  actionlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Check workflow files
        run: |
          bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
          echo "::add-matcher::.github/actionlint-matcher.json"
          ./actionlint -color
        shell: bash
